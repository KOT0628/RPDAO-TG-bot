import os
import sys
import psutil
import random
import requests
from PIL import Image, ImageDraw, ImageFont
import datetime
import time
import telebot
from requests.exceptions import ReadTimeout
from dotenv import load_dotenv
import schedule
import logging
import threading

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("logs.txt", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# ==== –ë–õ–û–ö–ò–†–û–í–ö–ê –ó–ê–ü–£–°–ö–ê ====
LOCK_FILE = "bot.lock"

def is_process_running(pid):
    return psutil.pid_exists(pid)

if os.path.exists(LOCK_FILE):
    with open(LOCK_FILE, "r") as f:
        try:
            pid = int(f.read())
            if is_process_running(pid):
                logging.error(f"‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID {pid}. –í—ã—Ö–æ–¥.")
                sys.exit(1)
            else:
                logging.warning("–ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π lock-—Ñ–∞–π–ª –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
        except ValueError:
            logging.warning("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π lock-—Ñ–∞–π–ª. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.")

# –ü–∏—à–µ–º —Ç–µ–∫—É—â–∏–π PID –≤ —Ñ–∞–π–ª
with open(LOCK_FILE, "w") as f:
    f.write(str(os.getpid()))

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = str(os.getenv("CHAT_ID"))  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
BACKGROUND_PATH = 'background.jpg'
FONT_PATH = 'SpicyRice-Regular.ttf'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN or not CHAT_ID:
    logging.critical("TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# ==== –ü–û–õ–£–ß–ï–ù–ò–ï –¶–ï–ù–´ ====
def get_btc_price():
    try:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        response = requests.get(url, timeout=10)
        data = response.json()
        return round(data["bitcoin"]["usd"], 2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã BTC: {e}")
        return 0.0

# ==== –°–û–ó–î–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ====
def create_price_image(price):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —à—Ä–∏—Ñ—Ç–∞
    if not os.path.exists(BACKGROUND_PATH):
        logging.error(f"‚ùå –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {BACKGROUND_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return False

    if not os.path.exists(FONT_PATH):
        logging.error("‚ùå –®—Ä–∏—Ñ—Ç SpicyRice-Regular.ttf –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.open(BACKGROUND_PATH)
        draw = ImageDraw.Draw(img)

        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        text = f"BTC\n${price}"
        
		# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
        font = ImageFont.truetype(FONT_PATH, 140)
        
        x, y = 35, 20  # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞

        # –¶–≤–µ—Ç–∞
        main_color = (255, 0, 0)          # –∫—Ä–∞—Å–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        shadow_color = (0, 0, 0)          # —á—ë—Ä–Ω–∞—è —Ç–µ–Ω—å
        outline_color = (255, 215, 0)     # –∑–æ–ª–æ—Ç–æ–π –∫–æ–Ω—Ç—É—Ä

        # –†–∏—Å—É–µ–º –¢–ï–ù–¨ (—Å–º–µ—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
        draw.text((x+4, y+4), text, font=font, fill=shadow_color)
        
		# –†–∏—Å—É–µ–º –ö–û–ù–¢–£–† (–æ–±–≤–æ–¥–∫—É) ‚Äî –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞
        for dx in [-2, -1, 1, 2]:
            for dy in [-2, -1, 1, 2]:
                if dx != 0 or dy != 0:
                    draw.text((x+dx, y+dy), text, font=font, fill=outline_color)
        
		# –†–∏—Å—É–µ–º –°–ê–ú –¢–ï–ö–°–¢
        draw.text((x, y), text, font=font, fill=main_color)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        img.save("btc_price_output.jpg")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False

def create_greeting_image(text, background_file, output_file):
    if not os.path.exists(background_file):
        logging.error(f"–§–∞–π–ª —Ñ–æ–Ω–∞ {background_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    if not os.path.exists(FONT_PATH):
        logging.error("‚ùå –®—Ä–∏—Ñ—Ç SpicyRice-Regular.ttf –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    try:
        img = Image.open(background_file)
        draw = ImageDraw.Draw(img)
        font = ImageFont.truetype(FONT_PATH, 100)

        x, y = 40, 570
        main_color = (255, 0, 0)          # –∫—Ä–∞—Å–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        shadow_color = (0, 0, 0)          # —á—ë—Ä–Ω–∞—è —Ç–µ–Ω—å
        outline_color = (255, 215, 0)     # –∑–æ–ª–æ—Ç–æ–π –∫–æ–Ω—Ç—É—Ä

        # –¢–µ–Ω—å
        draw.text((x+4, y+4), text, font=font, fill=shadow_color)

        # –ö–æ–Ω—Ç—É—Ä
        for dx in [-2, -1, 1, 2]:
            for dy in [-2, -1, 1, 2]:
                if dx != 0 or dy != 0:
                    draw.text((x+dx, y+dy), text, font=font, fill=outline_color)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        draw.text((x, y), text, font=font, fill=main_color)

        img.save(output_file)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        return False

# ==== –û–¢–ü–†–ê–í–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ====
def send_price_image():
    try:
        price = get_btc_price()
        if price == 0.0:
            logging.warning("–¶–µ–Ω–∞ BTC –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        if create_price_image(price):
            with open("btc_price_output.jpg", "rb") as photo:
                bot.send_photo(CHAT_ID, photo, caption=f"Greetings Adventurers! Current #price $BTC: ${price}")
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# ==== –ù–ê–°–¢–†–û–ô–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø (1 —Ä–∞–∑ –≤ 4 —á–∞—Å–∞) ====
schedule.every(4).hours.do(send_price_image)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /price ====
@bot.message_handler(commands=['price'])
def handle_price_command(message):
    try:
        if str(message.chat.id) == CHAT_ID:
            price = get_btc_price()
            if price == 0.0:
                bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC.")
                return
            if create_price_image(price):
                with open("btc_price_output.jpg", "rb") as photo:
                    bot.send_photo(CHAT_ID, photo, caption=f"Greetings Adventurers! Current #price $BTC: ${price}")
                logging.info(f"{message.from_user.username or message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /price. –¶–µ–Ω–∞ BTC: ${price}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /price: {e}")

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /reroll ====
@bot.message_handler(commands=['reroll'])
def handle_reroll_command(message):
    try:
        if str(message.chat.id) == CHAT_ID:
            options = {
                'ü™®': '–ö–∞–º–µ–Ω—å',
                '‚úÇÔ∏è': '–ù–æ–∂–Ω–∏—Ü—ã',
                'üìÑ': '–ë—É–º–∞–≥–∞'
            }
            choice_emoji = random.choice(list(options.keys()))
            choice_name = options[choice_emoji]

            bot.reply_to(message, f"{choice_emoji}")
            logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /reroll –æ—Ç {message.from_user.username or message.from_user.id}: {choice_name} {choice_emoji}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /reroll: {e}")

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /gm ====
@bot.message_handler(commands=['gm'])
def handle_gm_command(message):
    try:
        if str(message.chat.id) == CHAT_ID:
            if create_greeting_image("Good morning Red Planet ‚òÄÔ∏è", "morning.jpg", "gm_output.jpg"):
                with open("gm_output.jpg", "rb") as photo:
                    bot.send_photo(message.chat.id, photo, caption=f"–í—Å–µ–º –±–æ–¥—Ä–æ–≥–æ —É—Ç—Ä–∞, –¥—Ä—É–∑—å—è! ‚òï\nGood morning to all, friends! ‚òï")
                logging.info(f"{message.from_user.username or message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /gm")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /gm: {e}")

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /gn ====
@bot.message_handler(commands=['gn'])
def handle_gn_command(message):
    try:
        if str(message.chat.id) == CHAT_ID:
            if create_greeting_image("Good night Red Planet üåô", "night.jpg", "gn_output.jpg"):
                with open("gn_output.jpg", "rb") as photo:
                    bot.send_photo(message.chat.id, photo, caption=f"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –õ–µ–≥–µ–Ω–¥—ã! üåå\nGood night, Legends! üåå")
                logging.info(f"{message.from_user.username or message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /gn")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /gn: {e}")

# ==== –ó–ê–ü–£–°–ö ====
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /price...")

# –ü–æ—Ç–æ–∫ –¥–ª—è schedule
threading.Thread(target=run_scheduler, daemon=True).start()

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ - polling
try:
    bot.remove_webhook()
    bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
finally:
    # –£–¥–∞–ª—è–µ–º lock-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)
        logging.info("Lock-—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
